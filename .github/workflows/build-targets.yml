name: build targets
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.base-image }}
    strategy:
      fail-fast: true
      matrix:
        target:
          - freebsd-amd64
          - linux-amd64
          - linux-arm64
          - openbsd-amd64
          - windows-amd64
        include:
          - target: freebsd-amd64
            arch: amd64
            base-image: ubuntu-latest
            os: freebsd
          - target: linux-amd64
            arch: amd64
            base-image: ubuntu-latest
            build-image: amd64/debian:stable
            os: linux
          - target: linux-arm64
            arch: arm64
            base-image: ubuntu-latest
            build-image: arm64v8/debian:stable
            os: linux
          - target: openbsd-amd64
            arch: amd64
            base-image: ubuntu-latest
            os: openbsd
          - target: windows-amd64
            arch: x64
            base-image: ubuntu-latest
            ext: ".exe"
            os: windows

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: FreeBSD Build
        if: matrix.os == 'freebsd'
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.2"
          usesh: true
          prepare: |
            pkg install -y bash cmake git
          run: |
            ./build_cmake.sh ${{ matrix.target }}

      - name: Set up QEMU
        if: matrix.os == 'linux'
        uses: docker/setup-qemu-action@v3

      - name: Linux Build
        if: matrix.os == 'linux'
        run: |
          docker run --platform linux/${{ matrix.arch }} --net=host --rm --device /dev/fuse -v $PWD:/mvdsv -w /mvdsv ${{ matrix.build-image }} bash -c "
            set -e
            apt-get -qq update
            apt-get -qq --no-install-recommends install cmake build-essential libcurl4-openssl-dev ninja-build

            ./build_cmake.sh ${{ matrix.target }}
            chown -R \$(id -u):\$(id -g) build/${{ matrix.target }}
          "

      - name: OpenBSD Build
        if: matrix.os == 'openbsd'
        uses: vmactions/openbsd-vm@v1
        with:
          release: '7.7'
          usesh: true
          prepare: |
            pkg_add bash cmake git
          run: |
            ./build_cmake.sh ${{ matrix.target }}

      - name: Build Windows
        if: matrix.os == 'windows'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get -qq --no-install-recommends install build-essential cmake gcc-mingw-w64-x86-64

          ./build_cmake.sh ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: qwfwd-${{ matrix.target }}
          path: build/${{ matrix.target }}/qwfwd${{ matrix.ext }}
